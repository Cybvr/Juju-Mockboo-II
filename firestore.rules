rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null;
      allow read, write: if true; // TEMPORARY: Allow unauthenticated bulk operations
      allow read, write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    // Documents collection
    match /documents/{documentId} {
      // Admin access first
      allow read, write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      allow read: if resource.data.isPublic == true ||
        (request.auth != null &&
         (resource.data.userId == request.auth.uid ||
          resource.data.shared == true));
      allow write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if true;
      allow update: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
    }
    // Chat sessions collection
    match /chats/{chatId} {
      allow read, write, delete: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    // Messages collection
    match /messages/{messageId} {
      allow read, write, delete: if request.auth != null &&
        (resource == null || 
         (resource.data.chatId != null &&
          exists(/databases/$(database)/documents/chats/$(resource.data.chatId)) &&
          get(/databases/$(database)/documents/chats/$(resource.data.chatId)).data.userId == request.auth.uid));
      allow create: if request.auth != null &&
        request.resource.data.chatId != null &&
        exists(/databases/$(database)/documents/chats/$(request.resource.data.chatId)) &&
        get(/databases/$(database)/documents/chats/$(request.resource.data.chatId)).data.userId == request.auth.uid;
    }
    // Canvas collection
    match /canvases/{canvasId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow read: if request.auth != null && resource.data.isPublic == true;
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.collaborators;
      allow update: if request.auth != null && 
        request.resource.data.keys().hasOnly(['likedBy', 'likesCount', 'updatedAt']) &&
        (request.auth.uid in request.resource.data.likedBy ||
         request.auth.uid in resource.data.likedBy);
      allow update: if request.auth != null && 
        request.resource.data.keys().hasOnly(['lastOpenedAt', 'viewCount', 'updatedAt']);
    }
    // Canvas versions collection
    match /canvas_versions/{versionId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == get(/databases/$(database)/documents/canvases/$(resource.data.canvasId)).data.userId;
      allow read: if request.auth != null && 
        get(/databases/$(database)/documents/canvases/$(resource.data.canvasId)).data.isPublic == true;
    }
    // Stories collection
    match /stories/{storyId} {
      // Read: allow for public stories or owner or shared stories
      allow read: if resource != null && 
        (resource.data.isPublic == true ||
         (request.auth != null && resource.data.userId == request.auth.uid) ||
         (request.auth != null && resource.data.shared == true));

      // Create: authenticated users can create their own stories
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
        
      // Update: only the owner can modify their stories
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
        
      // Delete: only the owner can delete their stories
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    // Galleries collection
    match /galleries/{galleryId} {
      allow read: if resource != null && 
        (resource.data.isPublic == true ||
         (request.auth != null && resource.data.userId == request.auth.uid));
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    // Credit transactions collection
    match /creditTransactions/{transactionId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow create: if true; // TEMPORARY: Allow unauthenticated bulk operations
      allow create: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    // Admin access to all collections
    match /{document=**} {
      allow read, write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
service firebase.storage {
  match /b/{bucket}/o {
    match /users/{userId}/profile/{fileName} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId &&
        request.resource.size < 5 * 1024 * 1024 &&
        request.resource.contentType.matches('image/.*');
    }
    match /users/{userId}/images/{fileName} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId &&
        request.resource.size < 25 * 1024 * 1024 &&
        request.resource.contentType.matches('image/.*');
    }
    match /documents/{documentId}/{fileName} {
      allow read: if request.auth != null &&
        (exists(/databases/$(database)/documents/documents/$(documentId)) &&
         (get(/databases/$(database)/documents/documents/$(documentId)).data.userId == request.auth.uid ||
          get(/databases/$(database)/documents/documents/$(documentId)).data.isPublic == true ||
          get(/databases/$(database)/documents/documents/$(documentId)).data.shared == true));
      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/documents/$(documentId)) &&
        get(/databases/$(database)/documents/documents/$(documentId)).data.userId == request.auth.uid &&
        request.resource.size < 50 * 1024 * 1024;
      allow delete: if request.auth != null &&
        exists(/databases/$(database)/documents/documents/$(documentId)) &&
        get(/databases/$(database)/documents/documents/$(documentId)).data.userId == request.auth.uid;
    }
    match /uploads/{userId}/{fileName} {
      allow read, write: if request.auth != null && request.auth.uid == userId &&
        request.resource.size < 25 * 1024 * 1024;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    match /public/{fileName} {
      allow read: if true;
      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    match /admin/{fileName} {
      allow read, write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    match /temp/{userId}/{fileName} {
      allow read, write: if request.auth != null && request.auth.uid == userId &&
        request.resource.size < 10 * 1024 * 1024;
    }
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
