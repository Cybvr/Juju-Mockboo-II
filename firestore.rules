rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection
    match /users/{userId} {
      // Users can read/write their own profile
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Any authenticated user can read basic profile info (for displaying creators, etc.)
      allow read: if request.auth != null;
      
      // TEMPORARY: Allow unauthenticated bulk operations for credit distribution
      allow read, write: if true;
      
      // Admins can read all user profiles and perform bulk operations
      allow read, write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Documents collection
    match /documents/{documentId} {
      allow read: if resource.data.isPublic == true ||
        (request.auth != null &&
         (resource.data.userId == request.auth.uid ||
          resource.data.shared == true));
      allow write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
      
      // Allow server-side document creation for API routes
      allow create: if true;
      
      // Allow server-side updates to content field for video generation
      allow update: if request.resource.data.keys().hasAny(['content', 'updatedAt']);
    }

    // Templates collection
    match /templates/{templateId} {
      allow read: if true; // Templates are public
      allow write: if request.auth != null &&
        (request.auth.uid == resource.data.createdBy ||
         exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow delete: if request.auth != null &&
        (request.auth.uid == resource.data.createdBy ||
         exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Chat sessions collection - Fixed rules
    match /chats/{chatId} {
      allow read, write, delete: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }

    // Messages collection - Fixed rules
    match /messages/{messageId} {
      allow read, write, delete: if request.auth != null &&
        (resource == null || 
         (resource.data.chatId != null &&
          exists(/databases/$(database)/documents/chats/$(resource.data.chatId)) &&
          get(/databases/$(database)/documents/chats/$(resource.data.chatId)).data.userId == request.auth.uid));
      allow create: if request.auth != null &&
        request.resource.data.chatId != null &&
        exists(/databases/$(database)/documents/chats/$(request.resource.data.chatId)) &&
        get(/databases/$(database)/documents/chats/$(request.resource.data.chatId)).data.userId == request.auth.uid;
    }

    // Knowledge base collection - Fixed to allow authenticated read access
    match /knowledgeBase/{docId} {
      allow read: if request.auth != null;
      allow write, delete: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow create: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Canvas collection - users can read/write their own canvases, read public ones
    match /canvases/{canvasId} {
      // Users can create canvases if they own them
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;

      // Owner can read/write their own canvases
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;

      // Anyone authenticated can read public canvases
      allow read: if request.auth != null && resource.data.isPublic == true;

      // Collaborators can read/write if they're in the collaborators array
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.collaborators;

      // Allow liking/unliking canvases (updating likedBy array and likesCount)
      allow update: if request.auth != null && 
        request.resource.data.keys().hasOnly(['likedBy', 'likesCount', 'updatedAt']) &&
        (request.auth.uid in request.resource.data.likedBy || 
         request.auth.uid in resource.data.likedBy);

      // Allow updating lastOpenedAt and viewCount for analytics
      allow update: if request.auth != null && 
        request.resource.data.keys().hasOnly(['lastOpenedAt', 'viewCount', 'updatedAt']);
    }

    // Canvas versions collection - linked to parent canvas permissions
    match /canvas_versions/{versionId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == get(/databases/$(database)/documents/canvases/$(resource.data.canvasId)).data.userId;
      allow read: if request.auth != null && 
        get(/databases/$(database)/documents/canvases/$(resource.data.canvasId)).data.isPublic == true;
    }

    // Boards collection
    match /boards/{boardId} {
      // Users can create boards if they own them
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;

      // Owner can read/write their own boards
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;

      // Anyone authenticated can read public boards
      allow read: if request.auth != null && resource.data.isPublic == true;

      // Allow updating documentIds array and updatedAt
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        request.resource.data.keys().hasAny(['documentIds', 'updatedAt']);
    }

    // Stories collection
    match /stories/{storyId} {
      // Users can create stories if they own them
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;

      // Owner can read/write their own stories
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;

      // Anyone authenticated can read public stories
      allow read: if request.auth != null && resource.data.isPublic == true;

      // Anyone authenticated can read shared stories
      allow read: if request.auth != null && resource.data.shared == true;

      // Allow updating specific fields
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        request.resource.data.keys().hasAny([
          'title', 'description', 'thumbnail', 'projectConfig', 'scenes', 
          'characters', 'locations', 'sounds', 'selectedTemplate', 'updatedAt',
          'isPublic', 'shared', 'tags', 'category'
        ]);
    }

    // Credit transactions collection
    match /creditTransactions/{transactionId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      
      // TEMPORARY: Allow unauthenticated bulk transaction creation
      allow create: if true;
      
      // Allow admins to create transactions for any user (bulk operations)
      allow create: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Generations collection
    match /generations/{generationId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // Admin access to all collections
    match /{document=**} {
      allow read, write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    // User profile images - users can upload their own profile pictures
    match /users/{userId}/profile/{fileName} {
      allow read: if true; // Profile images are publicly readable
      allow write: if request.auth != null && request.auth.uid == userId &&
        request.resource.size < 5 * 1024 * 1024 && // 5MB limit
        request.resource.contentType.matches('image/.*');
    }

    // User generated images - users can upload their own generated images
    match /users/{userId}/images/{fileName} {
      allow read: if true; // Generated images are publicly readable
      allow write: if request.auth != null && request.auth.uid == userId &&
        request.resource.size < 25 * 1024 * 1024 && // 25MB limit
        request.resource.contentType.matches('image/.*');
    }

    // Template images - authenticated users can upload, public read
    match /templates/{templateId}/{fileName} {
      allow read: if true; // Template images are publicly readable
      allow write: if request.auth != null &&
        request.resource.size < 10 * 1024 * 1024 && // 10MB limit
        request.resource.contentType.matches('image/.*');
      allow delete: if request.auth != null &&
        (exists(/databases/$(database)/documents/templates/$(templateId)) &&
         get(/databases/$(database)/documents/templates/$(templateId)).data.createdBy == request.auth.uid ||
         exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Document files - owner and public access based on document settings
    match /documents/{documentId}/{fileName} {
      allow read: if request.auth != null &&
        (exists(/databases/$(database)/documents/documents/$(documentId)) &&
         (get(/databases/$(database)/documents/documents/$(documentId)).data.userId == request.auth.uid ||
          get(/databases/$(database)/documents/documents/$(documentId)).data.isPublic == true ||
          get(/databases/$(database)/documents/documents/$(documentId)).data.shared == true));
      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/documents/$(documentId)) &&
        get(/databases/$(database)/documents/documents/$(documentId)).data.userId == request.auth.uid &&
        request.resource.size < 50 * 1024 * 1024; // 50MB limit for documents
      allow delete: if request.auth != null &&
        exists(/databases/$(database)/documents/documents/$(documentId)) &&
        get(/databases/$(database)/documents/documents/$(documentId)).data.userId == request.auth.uid;
    }

    // User uploads - general user files
    match /uploads/{userId}/{fileName} {
      allow read, write: if request.auth != null && request.auth.uid == userId &&
        request.resource.size < 25 * 1024 * 1024; // 25MB limit
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Public assets - read-only for all, admin write
    match /public/{fileName} {
      allow read: if true;
      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Admin uploads - admin only access
    match /admin/{fileName} {
      allow read, write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Temporary uploads - authenticated users, auto-cleanup after 24 hours
    match /temp/{userId}/{fileName} {
      allow read, write: if request.auth != null && request.auth.uid == userId &&
        request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }

    // Deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}