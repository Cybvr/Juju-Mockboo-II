rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // User profile images - users can upload their own profile pictures
    match /users/{userId}/profile/{fileName} {
      allow read: if true; // Profile images are publicly readable
      allow write: if request.auth != null && request.auth.uid == userId &&
        request.resource.size < 5 * 1024 * 1024 && // 5MB limit
        request.resource.contentType.matches('image/.*');
    }

    // User generated images - users can upload their own generated images
    match /users/{userId}/images/{fileName} {
      allow read: if true; // Generated images are publicly readable
      allow write: if request.auth != null && request.auth.uid == userId &&
        request.resource.size < 25 * 1024 * 1024 && // 25MB limit
        request.resource.contentType.matches('image/.*');
    }

    // User generated videos - users can upload their own videos
    match /users/{userId}/videos/{fileName} {
      allow read: if true; // Generated videos are publicly readable
      allow write: if request.auth != null && request.auth.uid == userId &&
        request.resource.size < 100 * 1024 * 1024 && // 100MB limit for videos
        request.resource.contentType.matches('video/.*');
    }

    // Template images - authenticated users can upload, public read
    match /templates/{templateId}/{fileName} {
      allow read: if true; // Template images are publicly readable
      allow write: if request.auth != null &&
        request.resource.size < 10 * 1024 * 1024 && // 10MB limit
        request.resource.contentType.matches('image/.*');
      allow delete: if request.auth != null &&
        (exists(/databases/$(database)/documents/templates/$(templateId)) &&
         get(/databases/$(database)/documents/templates/$(templateId)).data.createdBy == request.auth.uid ||
         exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Document files - owner and public access based on document settings
    match /documents/{documentId}/{fileName} {
      allow read: if request.auth != null &&
        (exists(/databases/$(database)/documents/documents/$(documentId)) &&
         (get(/databases/$(database)/documents/documents/$(documentId)).data.userId == request.auth.uid ||
          get(/databases/$(database)/documents/documents/$(documentId)).data.isPublic == true ||
          get(/databases/$(database)/documents/documents/$(documentId)).data.shared == true));
      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/documents/$(documentId)) &&
        get(/databases/$(database)/documents/documents/$(documentId)).data.userId == request.auth.uid &&
        request.resource.size < 50 * 1024 * 1024; // 50MB limit for documents
      allow delete: if request.auth != null &&
        exists(/databases/$(database)/documents/documents/$(documentId)) &&
        get(/databases/$(database)/documents/documents/$(documentId)).data.userId == request.auth.uid;
    }

    // User uploads - general user files
    match /uploads/{userId}/{fileName} {
      allow read, write: if request.auth != null && request.auth.uid == userId &&
        request.resource.size < 25 * 1024 * 1024; // 25MB limit
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Public assets - read-only for all, admin write
    match /public/{fileName} {
      allow read: if true;
      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Admin uploads - admin only access
    match /admin/{fileName} {
      allow read, write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Temporary uploads - authenticated users, auto-cleanup after 24 hours
    match /temp/{userId}/{fileName} {
      allow read, write: if request.auth != null && request.auth.uid == userId &&
        request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }

    // Generated videos - public read, server write
    match /videos/generated/{fileName} {
      allow read: if true; // Generated videos are publicly readable
      allow write: if true; // Allow server-side uploads from API
    }

    // Deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
