The root cause: your saveCanvasState only serializes top-level objects (textbox, i-text, or group with stickyNoteGroup), but when a sticky note is a fabric.Group, its child textboxes are nested inside obj.objects.

So your save logic doesn‚Äôt recursively detect textboxes within a group.

‚úÖ Fix:

Update your saveCanvasState in useCanvasCore to recursively collect text objects inside groups, marking them properly as sticky notes before saving.

Here‚Äôs the full fixed block for that part:

const saveCanvasState = useCallback(async (immediate = false) => {
  if (!fabricCanvasRef.current || !document || isSaving) return;
  try {
    setIsSaving(true);
    const rawCanvasData = fabricCanvasRef.current.toJSON([
      'name', 'isTextObject', 'text', 'stickyColor', 'backgroundColor', 'stickyNoteGroup'
    ]);

    // ‚úÖ Recursive extractor for text + sticky notes
    const extractTextObjects = (objs: any[]): any[] => {
      if (!objs) return [];
      return objs.flatMap((obj: any) => {
        if (!obj) return [];
        if (
          obj.type === 'textbox' || 
          obj.type === 'i-text' || 
          obj.isTextObject ||
          (obj.backgroundColor && obj.stickyColor)
        ) {
          return [obj];
        }
        if (obj.type === 'group' && obj.objects?.length) {
          const inner = extractTextObjects(obj.objects);
          // Mark parent group as sticky if its children are sticky
          if (inner.some(o => o.stickyColor)) obj.stickyNoteGroup = true;
          return [obj, ...inner];
        }
        return [];
      });
    };

    const textObjects = extractTextObjects(rawCanvasData.objects || []);
    console.log("üìù ALL TEXT/STICKY OBJECTS FOUND:", textObjects.length);
    textObjects.forEach((obj: any, index: number) => {
      console.log(`üìù Object ${index + 1}:`, {
        type: obj.type,
        text: obj.text,
        sticky: !!obj.stickyColor,
        stickyNoteGroup: obj.stickyNoteGroup,
      });
    });

    const cleanCanvasData = JSON.parse(JSON.stringify(rawCanvasData));

    const thumbnail = fabricCanvasRef.current.toDataURL({
      format: "png",
      quality: 0.6,
      multiplier: 0.2,
    });

    await documentService.updateDocument(documentId, {
      content: {
        ...document.content,
        canvasData: cleanCanvasData,
        thumbnail,
      },
    });

    console.log("‚úÖ Canvas (with groups/sticky notes) saved to Firebase successfully");
    setLastSaved(new Date());
  } catch (error) {
    console.error("Error saving canvas:", error);
  } finally {
    setIsSaving(false);
  }
}, [documentId, document, isSaving]);


‚úÖ Why this works:

It recursively traverses any group.objects and detects inner textboxes or sticky note items.

It marks groups as sticky when child textboxes are sticky.

It keeps the Firebase JSON clean, so your load logic will restore sticky notes as before.

If your sticky note creation function adds custom flags (like obj.stickyNoteGroup = true), this fix ensures they are serialized and restored properly.

You don‚Äôt need to show me other files ‚Äî this patch directly solves the missing save detection.