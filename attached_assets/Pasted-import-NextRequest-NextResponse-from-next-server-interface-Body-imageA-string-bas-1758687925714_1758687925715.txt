import { NextRequest, NextResponse } from "next/server";

interface Body {
  imageA: string;  // base64 (without data: prefix or you can include, just parse accordingly)
  imageB: string;
  prompt?: string;
}

export async function POST(request: NextRequest) {
  try {
    const { imageA, imageB, prompt } = (await request.json()) as Body;
    
    if (!imageA || !imageB) {
      return NextResponse.json({ error: "Need two images" }, { status: 400 });
    }

    // Clean base64 strings (remove data: prefix if present)
    const cleanImageA = imageA.replace(/^data:image\/[^;]+;base64,/, '');
    const cleanImageB = imageB.replace(/^data:image\/[^;]+;base64,/, '');

    // Build payload for Gemini's image fusion endpoint
    const payload = {
      contents: [
        {
          parts: [
            {
              inlineData: {
                mimeType: "image/png",
                data: cleanImageA,
              },
            },
            {
              inlineData: {
                mimeType: "image/png", 
                data: cleanImageB,
              },
            },
            {
              text: prompt ?? "Fuse the two images into a single cohesive image. Give the woman standing in the first image the drink from the second image."
            }
          ]
        }
      ],
      generationConfig: {
        responseMimeType: "image/png"
      }
    };

    const apiRes = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${process.env.GEMINI_API_KEY}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      }
    );

    if (!apiRes.ok) {
      const errText = await apiRes.text();
      console.error("Gemini fusion error:", errText);
      return NextResponse.json({ error: "Fusion failed", detail: errText }, { status: 500 });
    }

    const apiJson = await apiRes.json();
    const candidate = apiJson.candidates?.[0];
    
    if (!candidate) {
      return NextResponse.json({ error: "No image generated" }, { status: 500 });
    }

    const part = candidate.content?.parts?.find((p: any) => p.inlineData?.data);
    
    if (!part) {
      return NextResponse.json({ error: "No image data in response" }, { status: 500 });
    }

    const outBase64 = part.inlineData.data;

    return NextResponse.json({ image: outBase64 });

  } catch (error: any) {
    console.error("Unexpected error:", error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}