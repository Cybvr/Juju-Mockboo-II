Ah, that TypeError: t is not iterable is a Fabric.js quirk ðŸ‘€

Hereâ€™s the issue:

In Fabric v5, the second argument to clone is no longer an array of properties. Passing ["id", "selectable", "evented"] throws exactly the error youâ€™re seeing.

ðŸ‘‰ So in your case, just remove the second argument.

Fixed Copy/Paste Handler

Replace your copy/paste section with this:

// Copy
if ((e.ctrlKey || e.metaKey) && e.key === "c") {
  e.preventDefault()
  const activeObject = canvas.getActiveObject()

  if (activeObject) {
    if (activeObject.type === "activeSelection") {
      const objects = activeObject.getObjects()
      Promise.all(objects.map(obj => new Promise(resolve => obj.clone(resolve))))
        .then(cloned => {
          window.copiedObjects = cloned
        })
    } else {
      activeObject.clone((cloned: any) => {
        window.copiedObjects = [cloned]
      })
    }
  }
  return
}

// Paste
if ((e.ctrlKey || e.metaKey) && e.key === "v") {
  e.preventDefault()

  if (window.copiedObjects?.length > 0) {
    canvas.discardActiveObject()
    const clonedObjects: any[] = []

    window.copiedObjects.forEach((obj: any) => {
      obj.clone((clonedObj: any) => {
        clonedObj.set({
          left: (clonedObj.left || 0) + 20,
          top: (clonedObj.top || 0) + 20,
          evented: true,
          selectable: true,
        })
        canvas.add(clonedObj)
        clonedObjects.push(clonedObj)

        // When all objects cloned
        if (clonedObjects.length === window.copiedObjects!.length) {
          if (clonedObjects.length === 1) {
            canvas.setActiveObject(clonedObjects[0])
          } else {
            import("fabric").then(({ ActiveSelection }) => {
              const selection = new ActiveSelection(clonedObjects, { canvas })
              canvas.setActiveObject(selection)
            })
          }
          canvas.requestRenderAll()
          handleCanvasChange()
        }
      })
    })
  }
  return
}


âœ… This avoids the .clone(..., ["id"]) error.
âœ… Works for both single and multiple selections.
âœ… Preserves selection after paste.