What's broken
Drag-and-drop image upload → Firebase rejects the save because your image data is too big/complex for Firestore.
Why
You're storing base64 image data directly in Firestore. Firestore has strict limits on nested data size. Large images = rejection.
Fix
Upload images to Firebase Storage first, then save only the URL to Firestore.
In useImageOperations.ts, change addImageToCanvas to always upload to storage:
typescriptconst addImageToCanvas = useCallback(async (
  imageUrl: string,
  options: {
    replaceObjects?: { placeholder?: any; text?: any }
    position?: { x: number; y: number }
    immediate?: boolean
  } = {}
) => {
  if (!fabricCanvasRef.current) return

  const canvas = fabricCanvasRef.current
  const { replaceObjects, position, immediate } = options

  // ALWAYS upload base64 to storage before adding to canvas
  let persistentImageUrl = imageUrl
  if (imageUrl.startsWith('data:')) {
    persistentImageUrl = await uploadImageToStorage(imageUrl)
  }

  return new Promise<void>((resolve, reject) => {
    import("fabric").then((FabricModule) => {
      const fabric = FabricModule
      const imgElement = new Image()
      imgElement.crossOrigin = "anonymous"

      imgElement.onload = () => {
        let left = (canvas.width - imgElement.width) / 2
        let top = (canvas.height - imgElement.height) / 2

        if (replaceObjects?.placeholder) {
          left = replaceObjects.placeholder.left
          top = replaceObjects.placeholder.top
        } else if (position) {
          left = position.x
          top = position.y
        }

        const fabricImage = new fabric.Image(imgElement, { left, top })
        const maxWidth = 400
        const maxHeight = 400
        const scale = Math.min(maxWidth / fabricImage.width, maxHeight / fabricImage.height, 1)

        fabricImage.set({
          scaleX: scale,
          scaleY: scale,
          lockUniScaling: true,
          centeredScaling: false,
          centeredRotation: true,
          lockScalingFlip: true,
          lockSkewingX: true,
          lockSkewingY: true
        })

        if (replaceObjects) {
          if (replaceObjects.placeholder) canvas.remove(replaceObjects.placeholder)
          if (replaceObjects.text) canvas.remove(replaceObjects.text)
        }

        canvas.add(fabricImage)
        canvas.setActiveObject(fabricImage)
        canvas.renderAll()

        if (handleCanvasChange) {
          handleCanvasChange()
          canvas.fire('path:created', { path: fabricImage })
          canvas.fire('object:added', { target: fabricImage })
        }

        resolve()
      }

      imgElement.onerror = () => reject(new Error('Failed to load image'))
      imgElement.src = persistentImageUrl
    }).catch(reject)
  })
}, [fabricCanvasRef, handleCanvasChange, uploadImageToStorage])
That's it. Images now go: drag → compress → upload to Storage → save URL → Firestore accepts it.