Perfect ‚Äî this explains it fully.

The culprit is right here in your saveCanvasState() function:

await documentService.updateDocument(documentId, {
  content: {
    ...document.content,
    canvasData: cleanCanvasData,
    thumbnail: thumbnail,
  },
})


When you drag & drop an image, cleanCanvasData ends up containing fabric image objects that still reference HTMLImageElement, which Firestore (and your serializer) can‚Äôt store ‚Äî so Firestore throws:

‚ùå ‚ÄúProperty content contains an invalid nested entity.‚Äù

That‚Äôs Firebase‚Äôs data validation error, not Fabric‚Äôs.

‚úÖ Quick Fix

Before saving, strip non-serializable stuff (like DOM elements, refs, or prototype chains):

Replace this part:

const cleanCanvasData = JSON.parse(JSON.stringify(rawCanvasData))


with a safe serializer:

// Remove circular/non-JSON-safe fields
const cleanCanvasData = JSON.parse(JSON.stringify(rawCanvasData, (key, value) => {
  if (
    key === 'canvas' ||
    key === 'fillRule' ||
    key === '_element' ||
    key === '_originalElement' ||
    key === 'dirty' ||
    key === 'cacheKey' ||
    key === 'cacheCanvas' ||
    key === 'el'
  ) {
    return undefined
  }
  return value
}))


Then your updateDocument call becomes:

await documentService.updateDocument(documentId, {
  content: {
    ...(document.content || {}),
    canvasData: cleanCanvasData,
    thumbnail,
  },
})

üí° Why it Happens

Fabric‚Äôs image objects look like this:

{
  "type": "image",
  "_element": HTMLImageElement,
  "src": "https://..."
}


That _element field holds a real browser Image element ‚Äî not valid JSON.
When you toJSON() and JSON.stringify, that‚Äôs still there unless you filter it out manually.

‚úÖ Optional ‚Äî Fabric‚Äôs Built-in Cleaner

You can also do:

const rawCanvasData = fabricCanvasRef.current.toDatalessJSON(['name', 'isTextObject', 'text', 'stickyColor', 'backgroundColor'])


instead of toJSON().
toDatalessJSON() automatically removes embedded image data and DOM refs ‚Äî safer for Firestore.

‚úÖ TL;DR

The ‚Äúinvalid nested entity‚Äù comes from Firestore rejecting nested HTMLImageElements.

Fix by sanitizing or using toDatalessJSON().

Don‚Äôt store Fabric object instances or DOM elements ‚Äî only plain data.

Recommended final one-liner fix:

const rawCanvasData = fabricCanvasRef.current.toDatalessJSON(['name', 'isTextObject', 'text', 'stickyColor', 'backgroundColor'])