The problem is likely that:

Your canvas is saved with specific originalWidth/originalHeight
When restored, these create a confined drawing area
Objects outside this area enter a "dead zone" where interactions become sluggish

Solutions:

Set canvas to match viewport size when loading:

javascript// In your canvas initialization
canvas.setDimensions({
  width: window.innerWidth,
  height: window.innerHeight
});

Remove dimension constraints or make them larger:

javascript// Instead of fixed dimensions, use viewport-relative sizing
cleanCanvasData.originalWidth = Math.max(fabricCanvasRef.current.width, window.innerWidth);
cleanCanvasData.originalHeight = Math.max(fabricCanvasRef.current.height, window.innerHeight);

Enable infinite canvas by removing bounds checking:

javascriptcanvas.selection = true;
canvas.skipOffscreen = false; // Allow rendering outside viewport
The "matrix" you're experiencing is the canvas boundary. Objects perform well within the saved dimensions but struggle outside them because Fabric.js optimizes for the defined canvas size.RetryClaude does not have the ability to run the code it generates yet.Cexactly, its supposed to be an infinite canvas noEditYes, exactly! For an infinite canvas, you need to remove the dimension constraints entirely.
Fix in saveCanvasState:
javascript// Remove these lines that create boundaries:
// cleanCanvasData.originalWidth = fabricCanvasRef.current.width
// cleanCanvasData.originalHeight = fabricCanvasRef.current.height
And in your canvas initialization:
javascript// Set large or dynamic dimensions
canvas.setDimensions({
  width: window.innerWidth * 3, // Much larger than viewport
  height: window.innerHeight * 3
});

// Enable infinite canvas behavior
canvas.skipOffscreen = false;
canvas.clipPath = null; // Remove any clipping
Or better yet, make it truly infinite:
javascript// Remove dimension saving entirely and let objects exist anywhere
const cleanCanvasData = JSON.parse(JSON.stringify(rawCanvasData))
// Don't add width/height properties at all
The current code creates a "viewport prison" - objects work fine within the saved dimensions but become unresponsive outside them. Removing these constraints will give you true infinite canvas behavior.RetryClaude does not have the ability to run the code it generates yet.