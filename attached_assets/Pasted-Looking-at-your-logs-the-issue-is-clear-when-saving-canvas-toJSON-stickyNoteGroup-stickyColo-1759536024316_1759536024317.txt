Looking at your logs, the issue is clear: when saving, canvas.toJSON(['stickyNoteGroup', 'stickyColor', 'isTextObject']) is not including your custom properties in the output.
The problem is in your toObject override. You're calling it on the group, but toJSON doesn't automatically use your custom toObject method for the properties you specify in the array parameter.
Here's the fix for use-sticky-note.tsx:Fixed use-sticky-note.tsxCodeÂ "use client"
import { useCallback } from "react"
import type { Canvas } from "fabric"

interface StickyNoteHookProps {
  fabricCanvasRef: React.MutableRefObject<any>
  handleCanvasChange: () => void
}

export function useStickyNote({ fabricCanvasRef,The key changes:

Use Object.defineProperty with enumerable: true - this ensures the properties are included when toJSON serializes the object
Bind the original toObject before overriding, so you don't lose Fabric's default serialization logic
Always return the custom properties in the overridden toObject, regardless of what's in propertiesToInclude

Also update your handlePaste function in use-canvas-core.tsx to use the same Object.defineProperty approach:
typescript// In handlePaste, replace the sticky note property setting with:
if (window.copiedObjects.stickyNoteGroup === true) {
  Object.defineProperty(clonedObj, 'stickyNoteGroup', {
    value: true,
    writable: true,
    enumerable: true,
    configurable: true
  })
  Object.defineProperty(clonedObj, 'stickyColor', {
    value: window.copiedObjects.stickyColor || "yellow",
    writable: true,
    enumerable: true,
    configurable: true
  })
  
  // Override toObject
  const originalToObject = clonedObj.toObject.bind(clonedObj)
  clonedObj.toObject = function(propertiesToInclude?: string[]) {
    const obj = originalToObject(propertiesToInclude)
    return {
      ...obj,
      stickyNoteGroup: this.stickyNoteGroup,
      stickyColor: this.stickyColor
    }
  }
}
This should fix the serialization issue and you'll see stickyNoteGroup and stickyColor in your Firebase saves.